// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SYS_DESIGN_PLAYGROUND/pkg/repo/model/model"
)

func newProductCost(db *gorm.DB, opts ...gen.DOOption) productCost {
	_productCost := productCost{}

	_productCost.productCostDo.UseDB(db, opts...)
	_productCost.productCostDo.UseModel(&model.ProductCost{})

	tableName := _productCost.productCostDo.TableName()
	_productCost.ALL = field.NewAsterisk(tableName)
	_productCost.ID = field.NewInt64(tableName, "id")
	_productCost.UserID = field.NewInt64(tableName, "user_id")
	_productCost.ProductType = field.NewString(tableName, "product_type")
	_productCost.ProductID = field.NewInt64(tableName, "product_id")
	_productCost.PDate = field.NewString(tableName, "p_date")
	_productCost.TotalCost7Day = field.NewInt64(tableName, "total_cost_7day")
	_productCost.CreatedAt = field.NewTime(tableName, "created_at")
	_productCost.UpdatedAt = field.NewTime(tableName, "updated_at")

	_productCost.fillFieldMap()

	return _productCost
}

type productCost struct {
	productCostDo

	ALL           field.Asterisk
	ID            field.Int64
	UserID        field.Int64
	ProductType   field.String
	ProductID     field.Int64
	PDate         field.String
	TotalCost7Day field.Int64
	CreatedAt     field.Time
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (p productCost) Table(newTableName string) *productCost {
	p.productCostDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productCost) As(alias string) *productCost {
	p.productCostDo.DO = *(p.productCostDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productCost) updateTableName(table string) *productCost {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.UserID = field.NewInt64(table, "user_id")
	p.ProductType = field.NewString(table, "product_type")
	p.ProductID = field.NewInt64(table, "product_id")
	p.PDate = field.NewString(table, "p_date")
	p.TotalCost7Day = field.NewInt64(table, "total_cost_7day")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *productCost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productCost) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["product_type"] = p.ProductType
	p.fieldMap["product_id"] = p.ProductID
	p.fieldMap["p_date"] = p.PDate
	p.fieldMap["total_cost_7day"] = p.TotalCost7Day
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p productCost) clone(db *gorm.DB) productCost {
	p.productCostDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productCost) replaceDB(db *gorm.DB) productCost {
	p.productCostDo.ReplaceDB(db)
	return p
}

type productCostDo struct{ gen.DO }

type IProductCostDo interface {
	gen.SubQuery
	Debug() IProductCostDo
	WithContext(ctx context.Context) IProductCostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductCostDo
	WriteDB() IProductCostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProductCostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProductCostDo
	Not(conds ...gen.Condition) IProductCostDo
	Or(conds ...gen.Condition) IProductCostDo
	Select(conds ...field.Expr) IProductCostDo
	Where(conds ...gen.Condition) IProductCostDo
	Order(conds ...field.Expr) IProductCostDo
	Distinct(cols ...field.Expr) IProductCostDo
	Omit(cols ...field.Expr) IProductCostDo
	Join(table schema.Tabler, on ...field.Expr) IProductCostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductCostDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductCostDo
	Group(cols ...field.Expr) IProductCostDo
	Having(conds ...gen.Condition) IProductCostDo
	Limit(limit int) IProductCostDo
	Offset(offset int) IProductCostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProductCostDo
	Unscoped() IProductCostDo
	Create(values ...*model.ProductCost) error
	CreateInBatches(values []*model.ProductCost, batchSize int) error
	Save(values ...*model.ProductCost) error
	First() (*model.ProductCost, error)
	Take() (*model.ProductCost, error)
	Last() (*model.ProductCost, error)
	Find() ([]*model.ProductCost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductCost, err error)
	FindInBatches(result *[]*model.ProductCost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProductCost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProductCostDo
	Assign(attrs ...field.AssignExpr) IProductCostDo
	Joins(fields ...field.RelationField) IProductCostDo
	Preload(fields ...field.RelationField) IProductCostDo
	FirstOrInit() (*model.ProductCost, error)
	FirstOrCreate() (*model.ProductCost, error)
	FindByPage(offset int, limit int) (result []*model.ProductCost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductCostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productCostDo) Debug() IProductCostDo {
	return p.withDO(p.DO.Debug())
}

func (p productCostDo) WithContext(ctx context.Context) IProductCostDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productCostDo) ReadDB() IProductCostDo {
	return p.Clauses(dbresolver.Read)
}

func (p productCostDo) WriteDB() IProductCostDo {
	return p.Clauses(dbresolver.Write)
}

func (p productCostDo) Session(config *gorm.Session) IProductCostDo {
	return p.withDO(p.DO.Session(config))
}

func (p productCostDo) Clauses(conds ...clause.Expression) IProductCostDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productCostDo) Returning(value interface{}, columns ...string) IProductCostDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productCostDo) Not(conds ...gen.Condition) IProductCostDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productCostDo) Or(conds ...gen.Condition) IProductCostDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productCostDo) Select(conds ...field.Expr) IProductCostDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productCostDo) Where(conds ...gen.Condition) IProductCostDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productCostDo) Order(conds ...field.Expr) IProductCostDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productCostDo) Distinct(cols ...field.Expr) IProductCostDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productCostDo) Omit(cols ...field.Expr) IProductCostDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productCostDo) Join(table schema.Tabler, on ...field.Expr) IProductCostDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productCostDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductCostDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productCostDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductCostDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productCostDo) Group(cols ...field.Expr) IProductCostDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productCostDo) Having(conds ...gen.Condition) IProductCostDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productCostDo) Limit(limit int) IProductCostDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productCostDo) Offset(offset int) IProductCostDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productCostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProductCostDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productCostDo) Unscoped() IProductCostDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productCostDo) Create(values ...*model.ProductCost) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productCostDo) CreateInBatches(values []*model.ProductCost, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productCostDo) Save(values ...*model.ProductCost) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productCostDo) First() (*model.ProductCost, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductCost), nil
	}
}

func (p productCostDo) Take() (*model.ProductCost, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductCost), nil
	}
}

func (p productCostDo) Last() (*model.ProductCost, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductCost), nil
	}
}

func (p productCostDo) Find() ([]*model.ProductCost, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductCost), err
}

func (p productCostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductCost, err error) {
	buf := make([]*model.ProductCost, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productCostDo) FindInBatches(result *[]*model.ProductCost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productCostDo) Attrs(attrs ...field.AssignExpr) IProductCostDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productCostDo) Assign(attrs ...field.AssignExpr) IProductCostDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productCostDo) Joins(fields ...field.RelationField) IProductCostDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productCostDo) Preload(fields ...field.RelationField) IProductCostDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productCostDo) FirstOrInit() (*model.ProductCost, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductCost), nil
	}
}

func (p productCostDo) FirstOrCreate() (*model.ProductCost, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductCost), nil
	}
}

func (p productCostDo) FindByPage(offset int, limit int) (result []*model.ProductCost, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productCostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productCostDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productCostDo) Delete(models ...*model.ProductCost) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productCostDo) withDO(do gen.Dao) *productCostDo {
	p.DO = *do.(*gen.DO)
	return p
}
