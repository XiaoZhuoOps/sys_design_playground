// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SYS_DESIGN_PLAYGROUND/pkg/repo/model/model"
)

func newWebProduct(db *gorm.DB, opts ...gen.DOOption) webProduct {
	_webProduct := webProduct{}

	_webProduct.webProductDo.UseDB(db, opts...)
	_webProduct.webProductDo.UseModel(&model.WebProduct{})

	tableName := _webProduct.webProductDo.TableName()
	_webProduct.ALL = field.NewAsterisk(tableName)
	_webProduct.ID = field.NewInt64(tableName, "id")
	_webProduct.Code = field.NewString(tableName, "code")
	_webProduct.Name = field.NewString(tableName, "name")
	_webProduct.Mode = field.NewInt32(tableName, "mode")
	_webProduct.Extra = field.NewString(tableName, "extra")
	_webProduct.Version = field.NewInt32(tableName, "version")
	_webProduct.CreatedAt = field.NewTime(tableName, "created_at")
	_webProduct.UpdatedAt = field.NewTime(tableName, "updated_at")
	_webProduct.DeletedAt = field.NewField(tableName, "deleted_at")

	_webProduct.fillFieldMap()

	return _webProduct
}

// webProduct Web Product table
type webProduct struct {
	webProductDo

	ALL       field.Asterisk
	ID        field.Int64  // Primary key ID
	Code      field.String // Business code
	Name      field.String // Name
	Mode      field.Int32  // Mode
	Extra     field.String // Extra information
	Version   field.Int32  // Optimistic lock version
	CreatedAt field.Time   // Creation time
	UpdatedAt field.Time   // Update time
	DeletedAt field.Field  // Deletion time

	fieldMap map[string]field.Expr
}

func (w webProduct) Table(newTableName string) *webProduct {
	w.webProductDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webProduct) As(alias string) *webProduct {
	w.webProductDo.DO = *(w.webProductDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webProduct) updateTableName(table string) *webProduct {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Code = field.NewString(table, "code")
	w.Name = field.NewString(table, "name")
	w.Mode = field.NewInt32(table, "mode")
	w.Extra = field.NewString(table, "extra")
	w.Version = field.NewInt32(table, "version")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")

	w.fillFieldMap()

	return w
}

func (w *webProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webProduct) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["id"] = w.ID
	w.fieldMap["code"] = w.Code
	w.fieldMap["name"] = w.Name
	w.fieldMap["mode"] = w.Mode
	w.fieldMap["extra"] = w.Extra
	w.fieldMap["version"] = w.Version
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
}

func (w webProduct) clone(db *gorm.DB) webProduct {
	w.webProductDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webProduct) replaceDB(db *gorm.DB) webProduct {
	w.webProductDo.ReplaceDB(db)
	return w
}

type webProductDo struct{ gen.DO }

type IWebProductDo interface {
	gen.SubQuery
	Debug() IWebProductDo
	WithContext(ctx context.Context) IWebProductDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebProductDo
	WriteDB() IWebProductDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebProductDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebProductDo
	Not(conds ...gen.Condition) IWebProductDo
	Or(conds ...gen.Condition) IWebProductDo
	Select(conds ...field.Expr) IWebProductDo
	Where(conds ...gen.Condition) IWebProductDo
	Order(conds ...field.Expr) IWebProductDo
	Distinct(cols ...field.Expr) IWebProductDo
	Omit(cols ...field.Expr) IWebProductDo
	Join(table schema.Tabler, on ...field.Expr) IWebProductDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebProductDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebProductDo
	Group(cols ...field.Expr) IWebProductDo
	Having(conds ...gen.Condition) IWebProductDo
	Limit(limit int) IWebProductDo
	Offset(offset int) IWebProductDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebProductDo
	Unscoped() IWebProductDo
	Create(values ...*model.WebProduct) error
	CreateInBatches(values []*model.WebProduct, batchSize int) error
	Save(values ...*model.WebProduct) error
	First() (*model.WebProduct, error)
	Take() (*model.WebProduct, error)
	Last() (*model.WebProduct, error)
	Find() ([]*model.WebProduct, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebProduct, err error)
	FindInBatches(result *[]*model.WebProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebProduct) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebProductDo
	Assign(attrs ...field.AssignExpr) IWebProductDo
	Joins(fields ...field.RelationField) IWebProductDo
	Preload(fields ...field.RelationField) IWebProductDo
	FirstOrInit() (*model.WebProduct, error)
	FirstOrCreate() (*model.WebProduct, error)
	FindByPage(offset int, limit int) (result []*model.WebProduct, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebProductDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webProductDo) Debug() IWebProductDo {
	return w.withDO(w.DO.Debug())
}

func (w webProductDo) WithContext(ctx context.Context) IWebProductDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webProductDo) ReadDB() IWebProductDo {
	return w.Clauses(dbresolver.Read)
}

func (w webProductDo) WriteDB() IWebProductDo {
	return w.Clauses(dbresolver.Write)
}

func (w webProductDo) Session(config *gorm.Session) IWebProductDo {
	return w.withDO(w.DO.Session(config))
}

func (w webProductDo) Clauses(conds ...clause.Expression) IWebProductDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webProductDo) Returning(value interface{}, columns ...string) IWebProductDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webProductDo) Not(conds ...gen.Condition) IWebProductDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webProductDo) Or(conds ...gen.Condition) IWebProductDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webProductDo) Select(conds ...field.Expr) IWebProductDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webProductDo) Where(conds ...gen.Condition) IWebProductDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webProductDo) Order(conds ...field.Expr) IWebProductDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webProductDo) Distinct(cols ...field.Expr) IWebProductDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webProductDo) Omit(cols ...field.Expr) IWebProductDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webProductDo) Join(table schema.Tabler, on ...field.Expr) IWebProductDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebProductDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webProductDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebProductDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webProductDo) Group(cols ...field.Expr) IWebProductDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webProductDo) Having(conds ...gen.Condition) IWebProductDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webProductDo) Limit(limit int) IWebProductDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webProductDo) Offset(offset int) IWebProductDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebProductDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webProductDo) Unscoped() IWebProductDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webProductDo) Create(values ...*model.WebProduct) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webProductDo) CreateInBatches(values []*model.WebProduct, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webProductDo) Save(values ...*model.WebProduct) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webProductDo) First() (*model.WebProduct, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebProduct), nil
	}
}

func (w webProductDo) Take() (*model.WebProduct, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebProduct), nil
	}
}

func (w webProductDo) Last() (*model.WebProduct, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebProduct), nil
	}
}

func (w webProductDo) Find() ([]*model.WebProduct, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebProduct), err
}

func (w webProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebProduct, err error) {
	buf := make([]*model.WebProduct, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webProductDo) FindInBatches(result *[]*model.WebProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webProductDo) Attrs(attrs ...field.AssignExpr) IWebProductDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webProductDo) Assign(attrs ...field.AssignExpr) IWebProductDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webProductDo) Joins(fields ...field.RelationField) IWebProductDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webProductDo) Preload(fields ...field.RelationField) IWebProductDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webProductDo) FirstOrInit() (*model.WebProduct, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebProduct), nil
	}
}

func (w webProductDo) FirstOrCreate() (*model.WebProduct, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebProduct), nil
	}
}

func (w webProductDo) FindByPage(offset int, limit int) (result []*model.WebProduct, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webProductDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webProductDo) Delete(models ...*model.WebProduct) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webProductDo) withDO(do gen.Dao) *webProductDo {
	w.DO = *do.(*gen.DO)
	return w
}
