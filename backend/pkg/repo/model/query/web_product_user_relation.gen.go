// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SYS_DESIGN_PLAYGROUND/pkg/repo/model/model"
)

func newWebProductUserRelation(db *gorm.DB, opts ...gen.DOOption) webProductUserRelation {
	_webProductUserRelation := webProductUserRelation{}

	_webProductUserRelation.webProductUserRelationDo.UseDB(db, opts...)
	_webProductUserRelation.webProductUserRelationDo.UseModel(&model.WebProductUserRelation{})

	tableName := _webProductUserRelation.webProductUserRelationDo.TableName()
	_webProductUserRelation.ALL = field.NewAsterisk(tableName)
	_webProductUserRelation.ID = field.NewInt64(tableName, "id")
	_webProductUserRelation.ProductID = field.NewInt64(tableName, "product_id")
	_webProductUserRelation.UserID = field.NewInt64(tableName, "user_id")
	_webProductUserRelation.CreateDate = field.NewTime(tableName, "create_date")

	_webProductUserRelation.fillFieldMap()

	return _webProductUserRelation
}

// webProductUserRelation Product and user relation table
type webProductUserRelation struct {
	webProductUserRelationDo

	ALL        field.Asterisk
	ID         field.Int64 // Auto-increment primary key
	ProductID  field.Int64 // Product ID
	UserID     field.Int64 // User ID
	CreateDate field.Time  // Creation timestamp

	fieldMap map[string]field.Expr
}

func (w webProductUserRelation) Table(newTableName string) *webProductUserRelation {
	w.webProductUserRelationDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webProductUserRelation) As(alias string) *webProductUserRelation {
	w.webProductUserRelationDo.DO = *(w.webProductUserRelationDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webProductUserRelation) updateTableName(table string) *webProductUserRelation {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.ProductID = field.NewInt64(table, "product_id")
	w.UserID = field.NewInt64(table, "user_id")
	w.CreateDate = field.NewTime(table, "create_date")

	w.fillFieldMap()

	return w
}

func (w *webProductUserRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webProductUserRelation) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 4)
	w.fieldMap["id"] = w.ID
	w.fieldMap["product_id"] = w.ProductID
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["create_date"] = w.CreateDate
}

func (w webProductUserRelation) clone(db *gorm.DB) webProductUserRelation {
	w.webProductUserRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webProductUserRelation) replaceDB(db *gorm.DB) webProductUserRelation {
	w.webProductUserRelationDo.ReplaceDB(db)
	return w
}

type webProductUserRelationDo struct{ gen.DO }

type IWebProductUserRelationDo interface {
	gen.SubQuery
	Debug() IWebProductUserRelationDo
	WithContext(ctx context.Context) IWebProductUserRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebProductUserRelationDo
	WriteDB() IWebProductUserRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebProductUserRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebProductUserRelationDo
	Not(conds ...gen.Condition) IWebProductUserRelationDo
	Or(conds ...gen.Condition) IWebProductUserRelationDo
	Select(conds ...field.Expr) IWebProductUserRelationDo
	Where(conds ...gen.Condition) IWebProductUserRelationDo
	Order(conds ...field.Expr) IWebProductUserRelationDo
	Distinct(cols ...field.Expr) IWebProductUserRelationDo
	Omit(cols ...field.Expr) IWebProductUserRelationDo
	Join(table schema.Tabler, on ...field.Expr) IWebProductUserRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebProductUserRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebProductUserRelationDo
	Group(cols ...field.Expr) IWebProductUserRelationDo
	Having(conds ...gen.Condition) IWebProductUserRelationDo
	Limit(limit int) IWebProductUserRelationDo
	Offset(offset int) IWebProductUserRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebProductUserRelationDo
	Unscoped() IWebProductUserRelationDo
	Create(values ...*model.WebProductUserRelation) error
	CreateInBatches(values []*model.WebProductUserRelation, batchSize int) error
	Save(values ...*model.WebProductUserRelation) error
	First() (*model.WebProductUserRelation, error)
	Take() (*model.WebProductUserRelation, error)
	Last() (*model.WebProductUserRelation, error)
	Find() ([]*model.WebProductUserRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebProductUserRelation, err error)
	FindInBatches(result *[]*model.WebProductUserRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebProductUserRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebProductUserRelationDo
	Assign(attrs ...field.AssignExpr) IWebProductUserRelationDo
	Joins(fields ...field.RelationField) IWebProductUserRelationDo
	Preload(fields ...field.RelationField) IWebProductUserRelationDo
	FirstOrInit() (*model.WebProductUserRelation, error)
	FirstOrCreate() (*model.WebProductUserRelation, error)
	FindByPage(offset int, limit int) (result []*model.WebProductUserRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebProductUserRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webProductUserRelationDo) Debug() IWebProductUserRelationDo {
	return w.withDO(w.DO.Debug())
}

func (w webProductUserRelationDo) WithContext(ctx context.Context) IWebProductUserRelationDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webProductUserRelationDo) ReadDB() IWebProductUserRelationDo {
	return w.Clauses(dbresolver.Read)
}

func (w webProductUserRelationDo) WriteDB() IWebProductUserRelationDo {
	return w.Clauses(dbresolver.Write)
}

func (w webProductUserRelationDo) Session(config *gorm.Session) IWebProductUserRelationDo {
	return w.withDO(w.DO.Session(config))
}

func (w webProductUserRelationDo) Clauses(conds ...clause.Expression) IWebProductUserRelationDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webProductUserRelationDo) Returning(value interface{}, columns ...string) IWebProductUserRelationDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webProductUserRelationDo) Not(conds ...gen.Condition) IWebProductUserRelationDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webProductUserRelationDo) Or(conds ...gen.Condition) IWebProductUserRelationDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webProductUserRelationDo) Select(conds ...field.Expr) IWebProductUserRelationDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webProductUserRelationDo) Where(conds ...gen.Condition) IWebProductUserRelationDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webProductUserRelationDo) Order(conds ...field.Expr) IWebProductUserRelationDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webProductUserRelationDo) Distinct(cols ...field.Expr) IWebProductUserRelationDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webProductUserRelationDo) Omit(cols ...field.Expr) IWebProductUserRelationDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webProductUserRelationDo) Join(table schema.Tabler, on ...field.Expr) IWebProductUserRelationDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webProductUserRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebProductUserRelationDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webProductUserRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebProductUserRelationDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webProductUserRelationDo) Group(cols ...field.Expr) IWebProductUserRelationDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webProductUserRelationDo) Having(conds ...gen.Condition) IWebProductUserRelationDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webProductUserRelationDo) Limit(limit int) IWebProductUserRelationDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webProductUserRelationDo) Offset(offset int) IWebProductUserRelationDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webProductUserRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebProductUserRelationDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webProductUserRelationDo) Unscoped() IWebProductUserRelationDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webProductUserRelationDo) Create(values ...*model.WebProductUserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webProductUserRelationDo) CreateInBatches(values []*model.WebProductUserRelation, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webProductUserRelationDo) Save(values ...*model.WebProductUserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webProductUserRelationDo) First() (*model.WebProductUserRelation, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebProductUserRelation), nil
	}
}

func (w webProductUserRelationDo) Take() (*model.WebProductUserRelation, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebProductUserRelation), nil
	}
}

func (w webProductUserRelationDo) Last() (*model.WebProductUserRelation, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebProductUserRelation), nil
	}
}

func (w webProductUserRelationDo) Find() ([]*model.WebProductUserRelation, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebProductUserRelation), err
}

func (w webProductUserRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebProductUserRelation, err error) {
	buf := make([]*model.WebProductUserRelation, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webProductUserRelationDo) FindInBatches(result *[]*model.WebProductUserRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webProductUserRelationDo) Attrs(attrs ...field.AssignExpr) IWebProductUserRelationDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webProductUserRelationDo) Assign(attrs ...field.AssignExpr) IWebProductUserRelationDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webProductUserRelationDo) Joins(fields ...field.RelationField) IWebProductUserRelationDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webProductUserRelationDo) Preload(fields ...field.RelationField) IWebProductUserRelationDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webProductUserRelationDo) FirstOrInit() (*model.WebProductUserRelation, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebProductUserRelation), nil
	}
}

func (w webProductUserRelationDo) FirstOrCreate() (*model.WebProductUserRelation, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebProductUserRelation), nil
	}
}

func (w webProductUserRelationDo) FindByPage(offset int, limit int) (result []*model.WebProductUserRelation, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webProductUserRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webProductUserRelationDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webProductUserRelationDo) Delete(models ...*model.WebProductUserRelation) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webProductUserRelationDo) withDO(do gen.Dao) *webProductUserRelationDo {
	w.DO = *do.(*gen.DO)
	return w
}
